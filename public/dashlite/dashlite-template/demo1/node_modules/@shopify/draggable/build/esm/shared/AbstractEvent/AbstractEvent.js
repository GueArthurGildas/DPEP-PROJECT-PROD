/**
 * All events fired by draggable inherit this class. You can call `cancel()` to
 * cancel a specific event or you can check if an event has been canceled by
 * calling `canceled()`.
 * @abstract
 * @class AbstractEvent
 * @module AbstractEvent
 */
class AbstractEvent {
  /**
   * AbstractEvent constructor.
   * @constructs AbstractEvent
   * @param {T} data - Event data
   */
  constructor(data) {
    /**
     * Private instance variable to track canceled state
     * @private
     * @type {Boolean}
     */
    this._canceled = false;
    this.data = data;
  }

  /**
   * Read-only type
   * @abstract
   * @return {String}
   */
  get type() {
    return this.constructor.type;
  }

  /**
   * Read-only cancelable
   * @abstract
   * @return {Boolean}
   */
  get cancelable() {
    return this.constructor.cancelable;
  }

  /**
   * Cancels the event instance
   * @abstract
   */
  cancel() {
    this._canceled = true;
  }

  /**
   * Check if event has been canceled
   * @abstract
   * @return {Boolean}
   */
  canceled() {
    return this._canceled;
  }

  /**
   * Returns new event instance with existing event data.
   * This method allows for overriding of event data.
   * @param {T} data
   * @return {AbstractEvent}
   */
  clone(data) {
    return new this.constructor({
      ...this.data,
      ...data
    });
  }
}
/**
 * Event type
 * @static
 * @abstract
 * @property type
 * @type {String}
 */
AbstractEvent.type = 'event';
/**
 * Event cancelable
 * @static
 * @abstract
 * @property cancelable
 * @type {Boolean}
 */
AbstractEvent.cancelable = false;

export { AbstractEvent };
